type Time = int;
type Result_2 = 
 variant {
   err: text;
   ok: vec Booking;
 };
type Result_1 = 
 variant {
   err: text;
   ok: Booking;
 };
type Result = 
 variant {
   err: text;
   ok: Evidence;
 };
type Location = 
 record {
   address: text;
   city: text;
   country: text;
   latitude: float64;
   longitude: float64;
   postalCode: text;
   state: text;
 };
type Evidence = 
 record {
   bookingId: text;
   createdAt: Time;
   description: text;
   fileUrls: vec text;
   id: text;
   qualityScore: opt float64;
   submitterId: principal;
 };
type BookingStatus = 
 variant {
   Accepted;
   Cancelled;
   Completed;
   Declined;
   Disputed;
   InProgress;
   Requested;
 };
type Booking = 
 record {
   clientId: principal;
   completedDate: opt Time;
   createdAt: Time;
   evidence: opt Evidence;
   id: text;
   location: Location;
   price: nat;
   providerId: principal;
   requestedDate: Time;
   scheduledDate: opt Time;
   serviceId: text;
   status: BookingStatus;
   updatedAt: Time;
 };
service : {
  getAllBookings: () -> (vec Booking) query;
  getAllEvidences: () -> (vec Evidence) query;
  getBooking: (bookingId: text) -> (Result_1) query;
  testAcceptBooking: () -> (Result_1);
  testCompleteBooking: () -> (Result_1);
  testCreateBooking: () -> (Result_1);
  testDisputeBooking: () -> (Result_1);
  testGetClientBookings: () -> (Result_2);
  testGetProviderBookings: () -> (Result_2);
  testStartBooking: () -> (Result_1);
  testSubmitEvidence: () -> (Result);
}
