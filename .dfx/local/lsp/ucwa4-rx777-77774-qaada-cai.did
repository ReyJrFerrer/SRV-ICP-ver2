type Time = int;
type Review = 
 record {
   bookingId: text;
   comment: text;
   createdAt: Time;
   id: text;
   rating: nat;
   reviewerId: principal;
   updatedAt: Time;
 };
type Result_3 = 
 variant {
   err: text;
   ok: float64;
 };
type Result_2 = 
 variant {
   err: text;
   ok;
 };
type Result_1 = 
 variant {
   err: text;
   ok: text;
 };
type Result = 
 variant {
   err: text;
   ok: Review;
 };
service : {
  calculateProviderRating: (providerId: principal) -> (Result_3) query;
  calculateServiceRating: (serviceId: text) -> (Result_3) query;
  calculateUserAverageRating: (userId: principal) -> (Result_3) query;
  deleteReview: (reviewId: text) -> (Result_2);
  getBookingReviews: (bookingId: text) -> (vec Review) query;
  getReview: (reviewId: text) -> (Result) query;
  getUserReviews: (userId: principal) -> (vec Review) query;
  setCanisterReferences: (booking: principal, "service": principal) ->
   (Result_1);
  submitReview: (bookingId: text, rating: nat, comment: text) -> (Result);
  updateReview: (reviewId: text, rating: nat, comment: text) -> (Result);
}
