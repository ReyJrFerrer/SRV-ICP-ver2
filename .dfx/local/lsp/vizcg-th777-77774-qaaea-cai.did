type TrustLevel = 
 variant {
   High;
   Low;
   Medium;
   New;
   VeryHigh;
 };
type Time = int;
type ReviewStatus = 
 variant {
   Flagged;
   Hidden;
   Visible;
 };
type Review = 
 record {
   bookingId: text;
   clientId: principal;
   comment: text;
   createdAt: Time;
   id: text;
   providerId: principal;
   qualityScore: opt float64;
   rating: nat;
   serviceId: text;
   status: ReviewStatus;
   updatedAt: Time;
 };
type Result_3 = 
 variant {
   err: text;
   ok: vec record {
             Time;
             float64;
           };
 };
type Result_2 = 
 variant {
   err: text;
   ok: Evidence;
 };
type Result_1 = 
 variant {
   err: text;
   ok: Review;
 };
type Result = 
 variant {
   err: text;
   ok: ReputationScore;
 };
type ReputationScore = 
 record {
   averageRating: opt float64;
   completedBookings: nat;
   detectionFlags: vec DetectionFlag;
   lastUpdated: Time;
   trustLevel: TrustLevel;
   trustScore: float64;
   userId: principal;
 };
type Evidence = 
 record {
   bookingId: text;
   createdAt: Time;
   description: text;
   fileUrls: vec text;
   id: text;
   qualityScore: opt float64;
   submitterId: principal;
 };
type DetectionFlag = 
 variant {
   CompetitiveManipulation;
   FakeEvidence;
   IdentityFraud;
   Other;
   ReviewBomb;
 };
service : {
  getReputationHistory: (userId: principal) -> (Result_3) query;
  getReputationStatistics: () ->
   (record {
      averageTrustScore: float64;
      totalUsers: nat;
      trustLevelDistribution: vec record {
                                    TrustLevel;
                                    nat;
                                  };
    }) query;
  testAddDetectionFlag: () -> (Result);
  testInitializeReputation: () -> (Result);
  testProcessEvidence: () -> (Result_2);
  testProcessReview: () -> (Result_1);
  testUpdateTrustScore: () -> (Result);
}
