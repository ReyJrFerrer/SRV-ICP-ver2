type Time = int;
type ReviewStatus = 
 variant {
   Flagged;
   Hidden;
   Visible;
 };
type Review = 
 record {
   bookingId: text;
   clientId: principal;
   comment: text;
   createdAt: Time;
   id: text;
   providerId: principal;
   qualityScore: opt float64;
   rating: nat;
   serviceId: text;
   status: ReviewStatus;
   updatedAt: Time;
 };
type Result_1 = 
 variant {
   err: text;
   ok: vec Review;
 };
type Result = 
 variant {
   err: text;
   ok: Review;
 };
service : {
  getAllReviews: () -> (vec Review) query;
  getReview: (reviewId: text) -> (Result) query;
  getReviewStatistics: () ->
   (record {
      activeReviews: nat;
      deletedReviews: nat;
      flaggedReviews: nat;
      hiddenReviews: nat;
      totalReviews: nat;
    }) query;
  testDeleteReview: () -> (Result);
  testGetBookingReviews: () -> (Result_1);
  testGetUserReviews: () -> (Result_1);
  testInvalidComment: () -> (Result);
  testInvalidRating: () -> (Result);
  testSubmitReview: () -> (Result);
  testUpdateReview: () -> (Result);
}
