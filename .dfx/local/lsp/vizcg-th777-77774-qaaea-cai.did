type Time = int;
type ReviewStatus = 
 variant {
   Flagged;
   Hidden;
   Visible;
 };
type Review = 
 record {
   bookingId: text;
   clientId: principal;
   comment: text;
   createdAt: Time;
   id: text;
   providerId: principal;
   qualityScore: opt float64;
   rating: nat;
   serviceId: text;
   status: ReviewStatus;
   updatedAt: Time;
 };
type Result_3 = 
 variant {
   err: text;
   ok: float64;
 };
type Result_2 = 
 variant {
   err: text;
   ok;
 };
type Result_1 = 
 variant {
   err: text;
   ok: text;
 };
type Result = 
 variant {
   err: text;
   ok: Review;
 };
service : {
  calculateProviderRating: (providerId: principal) -> (Result_3) query;
  calculateServiceRating: (serviceId: text) -> (Result_3) query;
  calculateUserAverageRating: (userId: principal) -> (Result_3) query;
  deleteReview: (reviewId: text) -> (Result_2);
  getBookingReviews: (bookingId: text) -> (vec Review) query;
  getReview: (reviewId: text) -> (Result) query;
  getReviewStatistics: () ->
   (record {
      activeReviews: nat;
      deletedReviews: nat;
      flaggedReviews: nat;
      hiddenReviews: nat;
      totalReviews: nat;
    }) query;
  getUserReviews: (userId: principal) -> (vec Review) query;
  initializeStaticReviewsManually: () -> (Result_1);
  setCanisterReferences: (booking: principal, "service": principal,
   reputation: principal, auth: principal) -> (Result_1);
  submitReview: (bookingId: text, rating: nat, comment: text) -> (Result);
  updateReview: (reviewId: text, rating: nat, comment: text) -> (Result);
}
